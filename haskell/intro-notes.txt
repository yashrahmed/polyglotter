HASKELL NOTES from http://learnyouahaskell.com/

Using "stack" manager to install and manage Haskell installations.

Please note that these notes sometimes use terminology from imperative programming.
This may lead to mis-representation of the concepts metioned herein. An effort has been
made to stick as close to functional programming paralance as possible.


Chapter 01: Starting out ---

-----Basics
1. Negative numbers are cannot simply be used in arithmetic operations e.g. 5 * -2. 
   Instead () need to be used in Haskell expressions. This is because the interpreter gets confused b/w infix and prefix notation.
3. Expressions like 99 > 100 == True are problematic for the same reason. Correct way to use it is (99 > 100) == True.
3. Haskell is strongly typed.
4. Characters literals are written using '' and String using "".
5. In GHCI the 'let' keyword is used to define (not create) a variable. e.g. let a = 2.
   This is equivalent to doing a = 1 in the script. Use of let in GHCI is optional.

-----Operator Basics
5. There is no operator for "%". Instead Haskell has the operator `rem`.
6. != is represented as /=.

-----Function Basics
7. Function calls can be represented as (func param1 param2 ....)
8. Functions in a script can be defined in any order.
9. Functions and variables can have a quote (') in their name. By convention, Functions
   with ' at the end signify strict (as opposed to lazy evaluation) enabled.

-----If statements
10. Unlike other imperative programs, if statements are expressions than a depiction of control flow. Therefore an if statement must always have a then and an else.

-----Lists
11. Lists in Haskell must be homogeneous i.e. of the same type.
12. In Haskell strings like "yolo" are represented as ['y','o','l','o'].
13. List concatenation is done using the '++' operator.
14. An entry can be expressed as being a result of pre-fixing it using the : operator. E.g. t = 32:[1,2,3].
    This defines t as [32,1,2,3].
15. Elements of the list can be accessed using the !! operator. e.g. t !! 3. Unlike python -ve indices are not allowed.
16. Haskell indices are 0 based.
17. Lists within lists cannot be of different types but can be of different lengths.

-----Built in function for Lists.
18. Haskell defines some built in functions for elements of head.
      Let the list be defined (not created) as t = [1,2,3,4,5]
      Then :
         head t implies and evaluates to (not returns) 1
         tail t implies [2,3,4,5]
         init t implies [1,2,3,4]
         last t implies 5
         length t evaluates to 5
         reverese t evaluates to [5,4,3,2,1]
         null t evalautes to True if list is empty, False otherwise.
         take n t represents the first n (or less elements) of the list.
         drop n t is the opposite of take.
         minimum t and maximum t represent minimum and maximum elements respectively.
         product t and sum t represent the product and sum of elements in t respectively.
         head, tail, init, last throw exceptions when used on an empty list. 
         k `elem` t is used to express if element k is in list t.
19. In Haskell lists (like the variables) are defined and not created. This is apparent in an expression like
    t = [1,2,3] followed by t = 1:t. Unlike python where this would (with some changes) represent an element being inserted into a list, GHCI would simply evaluate the expression ad-infinitum as the definition of t is recursive and unbounded. This behavior is not unlike what is observed in Prolog**.

-----Ranges
20. Haskell includes support for finite and infinite lists generated using ranges.
    [1..10] - Represents (and evaluates) to a list of 10 elements from 1 to 10 (inclusive).
    [1,2..10] - Represents interval [1,10] with step size of 1. The second element before .. is used to compute step size.
    [20,19..1] - Reverse lists require intermediary number to be specified. [20..1] evaluates to an empty list[].
    [1..] and [1,2..] represent infinite sequences. Haskell evaluates them lazily for e.g. the expression take 3 [1..] evaluates to [1,2,3].
    functions like cycle and repeat can represent infinite lists.
    replicate x k represents a list [x,x....k times].
21. Ranges also work with characters. Unicode characters produce some odd results for e.g.
    ['α'..'π'] evaluates to "\945\946\947\948\949\950\951\952\953\954\955\956\957\958\959\960".


-----List comprehensions
22. List comprehensions in Haskell are written using the following general expression
    [f(x) | x <- Domain, p1(x), p2(x),....pn(x)]
    where
      f is a function of x used to evaluate the output value.
      Domain is a list of values from which we can draw sample values for x.
      p1, p2,...pn are predicates which evaluate to True or False for a given value of x. ALL predicates must evaluate to True for x to be retained.
    Multiple variables are also allowed in Haskell similar to python. For e.g.
    [x + y | x <- [1..10], y <-[11..20], even x, odd y]. Like python '_' can be used to ignore the variables.

-----Tuples
23. Tuples work in a way similar to python. They have a finite number of values and can have values of different types e.g. ('Pizza Hut', 'Pepperoni', 10.99) is a valid tuple in Haskell. Haskell also considers a tuple as its own type. For e.g. (1,2) and (1,2,3) are tuples of different 'types', therefore a list [(1,2),(1,2,3)] cannot be represented is Haskell.
24. Haskell has two built in functions for tuples.
    fst -- represents first value
    snd -- represents second value
    These methods only work on doubles.
25. Singleton tuples are not allowed in Haskell. They are evaluated as an independent non-tuple value.
26. The zip function represents a list which contains tuples of corresponding elements of 2 lists. Unlike python zip does not evaluate for more than 2 lists.

Chapter 02: Types and Typeclasses ---

27. Haskell has a built in type-inference mechanism.
28. :t x represents the datatype of the value x. For e.g. :t 24 evaluates to 24 :: Num p => p. The symbol '=>' represents a class constraint. And the symbol '::' is read as 'has type of'. 
29. Explicit types in Haskell are represented by keywords with an uppercase first letter.
27. Strings are of type [Char].
28. Haskell (like Java 8 and above) also assigns type to functions. For e.g. :t cycle evaluates to [a] -> [a] i.e. it takes a list and returns a list. For functions with multiple arguments e.g. :t double_min which takes rwo arguments, Haskell evaluates the expression as double_min :: (Num a, Ord a) => a -> a -> a. There is no distinction made between the arguments and the return type. The last value is the return type.
29. Haskell built in types (including Prelude, which is a module included by default in all other modules) have the following types
    a. Char
    b. Float (single precision)
    c. Double (double precision)
    d. Bool.
    e. Int.
    f. Integer (Similar to BigInteger class in Java).
30. :t min evaluates to "min :: Ord a => a -> a -> a". In this result, 'a' is a Type variable (similar to Generics in Java) with a constraint that a be any type that is either Ord or its sub type.

-----Typeclasses
31. In Haskell all operators are functions. Any function with only special characters is considered an infix operator. The operator function must be wrapped within '()' to be used as a prefix (as is the case for regular functions) or when passed as arguments to other functions. For e.g. 2 + 3 and (+) 2 3 both evaluate to 5.
32. Also functions with 'normal' names can be used in infix forms using ``. For e.g. 2 `double_min` 3 and double_min 2 3 both evaluate to 4.
32. Operators like '==', '/=', '+', '-' etc are all functions. Expresson :t (+) evaluates to min :: Ord a => a -> a -> a.
33. Haskell Typeclasses are similar to Java interfaces that represent a certain type of behavior. Common typeclasses are described below -
    a. Eq - All subclasses of Eq must implement '=' and '/=' functions.
    b. Ord - Represents types that define partial or full order. It contains functions like >=, <=, > and <. Ord is a sub typeclass of Eq
    c. Show - Represent all typeclasses that can be represented as strings.
    d. Read - All classes that can be parsed from a string. The type constraint must be inferrable from the expression. For e.g. read "4" results in a parse failures since that could be interpreted as multiple ambiguous types. It could be an Int or a Char. An expression like read "3" + 4 is valid as Haskell can infer the type. 
    
    In order to represent a specific type the '::' symbol can be used. For e.g. read "3" :: Int evaluates to 3 while read "3" :: Float evalautes to 3.0. Note that '::' is NOT an operator. It is a 'keyword' used to represent the type.
    
    e. Enum - Typeclasses whose instances can be completely ordered. Some of the subclasses are Bool, Char, Int, Integer, Float, Double.
    f. Bounded - Typeclasses having an upper and a lower bound. minBound and maxBound methods can be used to check the bounds of any subclasses of Bounded. e.g. minBound :: Int yields -9223372036854775808. The sub-expression ':: Int' is also used to pass in type-variable arguments (Not sure about the mechanism!!!!1).
    g. Num - Represents numeric typeclasses like the one mentioned above. Some other special subclasses of Num are Integral (which provides whole number division and remainder operation support) and Floating (which encompasses Float and Double).
34. The typeclasses in Prelude 'implement' multiple typeclasses.


Chapter 03: Syntax in Functions

-----Pattern Matching

35. The fibonacci implementation in Haskell is as follows
    fib :: Integer a => a -> a
    fib 0 = 0
    fib 1 = 1
    fib n = fib (n - 1) + fib (n - 2)

    This looks similar to a fibonacci definition in Prolog (or even on Paper). Haskell is able to successfully interpret the function defintion using pattern matching. In a manner of speaking, Haskell scans the different 'sub-definitions' and applies the correct one when evaluating the function. Note that the type constraint mentioned above MUST be a typeclass and NOT a typeinstance like Int or Float.
36. Pattern matching scan works from top to bottom. The ordering of the rules IS important. For e.g. the code below is a valid factorial implementation.
    fact :: Integral a => a -> a
    fact 0 = 1
    fact n = n * fact(n-1)

    However, If the order of the rules were reversed, then the evaluation would never terminate. This is one of the few ways in which defining a function in Haskell is different from simply writing in on paper.

37. If a pattern match cannot be found, then an exception is thrown. It is recommended to have a catchall case at the end.

38. Pattern matching can be used with tuples like in the example below - 
    third :: (a, b, c) -> c
    third (_, _, z) = z

    and also with arrays

    header :: [a] -> a
    header [] = error "failed"
    header (x:_) = x

    Binding multiple variables requires enclosing the expression in ().

    In case, we need the reference to the original list the @ can be used in the pattern for e.g.

    header :: [a] -> a
    header [] = error "failed"
    header l@(x:_) = x -- l can now be used as is.
39 '++' operator cannot be used in patterns.

-----Guards and where / let variable binding
40. Guard operators are similar to switch cases in other languages. They are written using the '|' character. Guards are evalauted in a manner similar to patterns i.e. from top to bottom. The first match is used.

An example of fizz buzz using guards look like --
fizz_buzz :: (Integral a) => a -> String
fizz_buzz x
    | x `rem` 15 == 0 = "Fizz Buzz"
    | x `rem` 3 == 0 = "Fizz"
    | x `rem` 5 == 0 = "Buzz"
    | otherwise = ""

'otherwise' acts as a catchall statement

41. Guard operations can get complicated to write (and could lead to repeated evaluations of the same expressions). The 'where' keyword allows variables to be defined and bound to names at the end of a guard expression. This can be used to simplify the guard checks and to prevent repeated evaluations of the same expressions

An example of fizz buzz written using guard clauses with where binding.
-- fizz buzz written using guards and where binding
fizz_buzz :: Integral(a) => a -> String
fizz_buzz x
    | is_div3 && is_div5 = "FizzBuzz"
    | is_div5  = "Buzz"
    | is_div3  = "Fizz"
    | otherwise       = ""
    where is_div3 = (x `rem` 3 == 0)
          is_div5 = (x `rem` 5 == 0)

42. Guards do not support pattern matching. Guard condition must evaluate to a Bool. 'Where' however, can be used with pattern matching when defining a variable.

43. Let bindings are similar to where bindings except that let can be used in any part of the expression. Note that let cannot be to bind variables in guards in a manner similar to where (Though let can be used with case statements).

e.g. of a let binding in use 
z  = let x = 2; y = 4; in x*x + y*y\
-- z evaluates to 20.

44. The let bindings are expression themselves (i.e. they can be crammed anywhere like if-else) while 'where' is a syntactic construct that can only be used inside functions.

----Case expressions
45. Similar to case statements in Java. But case in Haskell is an expression and can be embedded anywhere.
The syntax to use them is as follows --
case x of pattern1 -> result1
          pattern2 -> result2
          .....  
If the case falls though all the way, then an exception is thrown.

46. Case classes support full pattern matching unlike guards.

47. How does GHC's pattern matcher work?
    Also check out Haskell's multi if.


Chapter 04: Recursion ----

48. Due to the declarative nature of Haskell, operations that are traditionally iterative must be defined recursively. Example of a function that gets the maximum value.

max_value :: (Ord a) => [a] -> a
max_value x = case x of
                    [] -> error "No max value in an empty list"
                    [a] -> a
                    (h:rest) -> max h (max_value rest)

49. Because Haskell supports infinte lists, reursive functions do not necessarily have to have a termination clause, but it is DEFINITELY recommended.

Chapter 05: Higher Order functions ----

---- Curried Functions

50. In Haskell, ALL functions are curried i.e. they are partially applicable. This is only relevant during evaluation and not definition. But knowing this feature combined with support for first class functions allows the expression of complex concepts easily. Curried functions always take a single argument. For example the max function is used as follows - 
    max 2 3 --evalautes to 3
However, it can also be used with partial application as follows
    t = max 2
    t 3 -- evaluates to 3
This is equivalent to doing (max 2) 3, where t represents (max 2) which is a partially applied function. Note that no special definition had to be used to allow this behavior. Haskell offers this out of the box. That is the reason why functions having multiple arguments have a type definition with -> for e.g. max :: (Ord a) => a -> a -> a instead of something like a,a -> a. The use of arrows instead of the ',' indicates partial applicability. This notation can also be used in lambda expressions. For instance -
    t = \x y -> x + y  -- is the same as 
    t = \x -> \y -> x + y

51. Haskell also had a special rule for parital applicability with infix functions using "sections". For e.g. the '/' operation can be used in the 'prefix' mode as '(/) 20 10' (evaluate to 2). Currying can be used like with other functions as shown below --
    t = (/) 20
    t 10 -- evaluates to 2
However, the special rule is applied when the operator is curried as follows
    t = (/ 20)
    t 10 -- evaluates to 0.5 instead of 2.0
Under the hood, Haskell creates a paritally applied function of the form _ / 20 and upon application, places the argument in the 'missing position'. This position inference works for all binary function. See examples below --
    t = (20 /)
    t 10 -- evaluates to 2
    y =(2 max)
    y 3 -- evaluates to 3

52. There is a single exception in Haskell when using sections. An expression like (- 4) would represent a partial function that would subtract 4 from a given number, but it instead refers to the value -4. To use sectioning with subtraction, use the subtract keyword for e.g. t = (subtract 4).

---- Functions as values

53. Haskell allows functions to be passed in as parameters. Here is an example
    apply_then_double :: (Num a) => (a -> a) -> a -> a
    apply_then_double f x = (*) 2 (f x)
    This function is used as shown below
        apply_then_double (\x -> x + 3) 2 -- evaluates to 10

54. Lambdas in Haskell are written as t = \arg1 arg2 .. argn -> expr(arg1, arg2,....arg n).

55. Similarly, functions can be returned by other functions e.g.
    incr x  = \p -> x + p -- returns a function
    t = incr 3
    t 5 -- evaluates to 8
    Incorrect naming can lead to anonymous behavior.
    incr x = \x -> x + 1 -- \x overwrites the previous value of x that is passed in and makes x a variable of the lambda as opposed to substituting the value.
    t = incr 3
    t 5 -- evaluates to 6 instead of 4

---- Maps, filters and other applicators.

56. "map" takes a function and a list of inputs and returns a list of values that are the result of applying the function on every input. For e.g.
    map (+1) [1,2,3,4] -- evaluates to [2,3,4,5]
The results of maps may also be partially applied functions. For e.g.
    map (*) [1,2,3] -- evaluates to an array of partially applied multiplication operators.

57. "filter" takes a function that evaluates to a Bool (called a Predicate) and a list. It then returns a list of values in the input list that satsify the predicate. For e.g.
    filter (\x->(x `rem` 2) == 0) [1..10] -- evaluates to a list of even numbers.

58. "takeWhile" works in a manner similar to filter in that it takes an predicate and a list as arguments. However, unlike "filter" it stops as soon as it finds a value that fails the predicate. "takeWhile" scans the list from left to right.
    filter (\x->(x `rem` 2) == 0) [1..10] -- evaluates to an empty list as 1 fails the predicate.

---- Lambdas

59. See #54.

---- Folding (Reduce) functions

60. Folding functions take 3 arguments namely a binary function F, an accumulator A and a list of values (x:xs). The fold function that evaluates F A x repeatedly on all values in the list. For e.g. foldl reduces the array from the left.
    foldl (+) 0 [1,2,3,4] -- evaluates to 10. (+) is the binary function, 0 the acc value and [1,2,3,4] the input list.

61. foldl and foldr start reducing the list from the left and right respectively.
    -- Example (inefficient !!) implementation of bubble sort using Folding
    foldl (\a x -> bubble a) [1,4,13,2] [1..4]

62. foldl1 and foldr1 are similar to foldl and foldr respectively, but they assume the first and last element as the accumulator value recursively.

63. scanl and scanl perform the reduction operation, but instead also report intermediate states. The result is the last element of the list(or first in case of scanr). For e.g.
    scanl (+) 0 [1,2,3,4] -- evaluates to [0,1,3,6,10]
    scanr (+) 0 [1,2,3,4] -- evaluates to [10,9,7,4,0]

---- Function application with $

64. f $ x is the same as writing f x (f is a function). However $ has the lowest precedence and is right asscociative. So sqrt 4 + 4 evalautes to 6 while sqrt $ 4 + 4 evalautes to 2.828.

---- Function composition

65. Haskell allows function composition using the '.' operator. For e.g.
    fn x = ceiling (negate (tan (cos (max 50 x))))  -- can be written as
    fn = ceiling . negate . tan . cos . max 50.
The function types MUST be compatible during composition. 


Chapter 06: Modules ---

66.Modules in Haskell (like Java/Python) is a collection of related functions, typeclasses and types.

67. To import module use import keyword. For e.g. import Data.List. To import specific entities from modules. import Data.List (sort).

68. Prelude is the standard module that is imported by default.

69. GHCI offers a shorthand to import modules. 
    :m + module1 module2 ....

70. Haskell allows qualified imports like Java/Python.
    import qualified Data.Map
    Now, when using the Map module's filter the function name must be fully qualified as "Data.Map.filter". Alternatively, a shorthand can be specified.
    import qualified Data.Map as m

71. Any module imported by the custom module is automatically available.

72. To write custom modules the following syntax is used.
    module moudle_name (
        entity1, ... entityn
    ) where
    ....entity definitions

73. Modules can be made hierarchical using #71. Create custom submodules and then use qualified imports for each of them in the parent module. For e.g.
    -- parent.HS
    import qualified Child1 as C1
    import qualified Child2 as C2
    ....

    -- C1, C2 and other imported modules will automatically be available when the parent module is imported.

74. GHC requires a naming convention to be followed. When importing a module named Areas.Circle for e.g. the file path must be "./Areas/Circle.hs". GHC is going to search for this file in its classpath equivalent (Where is it configured???)

